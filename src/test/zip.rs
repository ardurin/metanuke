use crate::metadata::zip::delete_metadata;
use std::io::Cursor;

const BASIC: &[u8] = &[
	0x50, 0x4B, 0x03, 0x04, 0x0A, 0x00, 0b00000000, 0b00000000, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00,
	0x63, 0xF3, 0xF3, 0xAD, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
	b'1', b'.', b't', b'x', b't', b'd', b'a', b't', b'a', 0x50, 0x4B, 0x01, 0x02, 0x0A, 0x03, 0x0A,
	0x00, 0b00000000, 0b00000000, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x63, 0xF3, 0xF3, 0xAD, 0x04,
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xA4, 0x81, 0x00, 0x00, 0x00, 0x00, b'1', b'.', b't', b'x', b't', 0x50, 0x4B,
	0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x33, 0x00, 0x00, 0x00, 0x27, 0x00,
	0x00, 0x00, 0x00, 0x00,
];

#[test]
fn basic() {
	let mut reader = Cursor::new([
		0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0b00000000, 0b00000000, 0x00, 0x00, 0x00, 0x00, 0x21,
		0x00, 0x63, 0xF3, 0xF3, 0xAD, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,
		0x00, 0x00, b'1', b'.', b't', b'x', b't', b'd', b'a', b't', b'a', 0x50, 0x4B, 0x01, 0x02,
		0x14, 0x00, 0x14, 0x00, 0b00000000, 0b00000000, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x63,
		0xF3, 0xF3, 0xAD, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA4, 0x81, 0x00, 0x00, 0x00, 0x00, b'1',
		b'.', b't', b'x', b't', 0x50, 0x4B, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01,
		0x00, 0x33, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00,
	]);
	let mut destination = Vec::new();
	let mut writer = Cursor::new(&mut destination);
	assert!(delete_metadata(&mut reader, &mut writer).is_ok());
	assert_eq!(destination, BASIC);
}

#[test]
fn comment() {
	let mut reader = Cursor::new([
		0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0b00000000, 0b00000000, 0x00, 0x00, 0x00, 0x00, 0x21,
		0x00, 0x63, 0xF3, 0xF3, 0xAD, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,
		0x00, 0x00, b'1', b'.', b't', b'x', b't', b'd', b'a', b't', b'a', 0x50, 0x4B, 0x01, 0x02,
		0x14, 0x00, 0x14, 0x00, 0b00000000, 0b00000000, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x63,
		0xF3, 0xF3, 0xAD, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA4, 0x81, 0x00, 0x00, 0x00, 0x00, b'1',
		b'.', b't', b'x', b't', 0x50, 0x4B, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01,
		0x00, 0x33, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x04, 0x00, b'7', b'z', b'i', b'p',
	]);
	let mut destination = Vec::new();
	let mut writer = Cursor::new(&mut destination);
	assert!(delete_metadata(&mut reader, &mut writer).is_ok());
	assert_eq!(destination, BASIC);
}

#[test]
fn file_comment() {
	let mut reader = Cursor::new([
		0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0b00000000, 0b00000000, 0x00, 0x00, 0x00, 0x00, 0x21,
		0x00, 0x63, 0xF3, 0xF3, 0xAD, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,
		0x00, 0x00, b'1', b'.', b't', b'x', b't', b'd', b'a', b't', b'a', 0x50, 0x4B, 0x01, 0x02,
		0x14, 0x00, 0x14, 0x00, 0b00000000, 0b00000000, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x63,
		0xF3, 0xF3, 0xAD, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA4, 0x81, 0x00, 0x00, 0x00, 0x00, b'1',
		b'.', b't', b'x', b't', b'7', b'z', b'i', b'p', 0x50, 0x4B, 0x05, 0x06, 0x00, 0x00, 0x00,
		0x00, 0x01, 0x00, 0x01, 0x00, 0x37, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00,
	]);
	let mut destination = Vec::new();
	let mut writer = Cursor::new(&mut destination);
	assert!(delete_metadata(&mut reader, &mut writer).is_ok());
	assert_eq!(destination, BASIC);
}

#[test]
fn date() {
	let mut reader = Cursor::new([
		0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0b00000000, 0b00000000, 0x00, 0x00, 0xC0, 0x83, 0x21,
		0x50, 0x63, 0xF3, 0xF3, 0xAD, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,
		0x00, 0x00, b'1', b'.', b't', b'x', b't', b'd', b'a', b't', b'a', 0x50, 0x4B, 0x01, 0x02,
		0x14, 0x00, 0x14, 0x00, 0b00000000, 0b00000000, 0x00, 0x00, 0xC0, 0x83, 0x21, 0x50, 0x63,
		0xF3, 0xF3, 0xAD, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA4, 0x81, 0x00, 0x00, 0x00, 0x00, b'1',
		b'.', b't', b'x', b't', 0x50, 0x4B, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01,
		0x00, 0x33, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00,
	]);
	let mut destination = Vec::new();
	let mut writer = Cursor::new(&mut destination);
	assert!(delete_metadata(&mut reader, &mut writer).is_ok());
	assert_eq!(destination, BASIC);
}

#[test]
fn hidden_file() {
	let mut reader = Cursor::new([
		0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0b00000000, 0b00000000, 0x00, 0x00, 0x00, 0x00, 0x21,
		0x00, 0x63, 0xF3, 0xF3, 0xAD, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,
		0x00, 0x00, b'0', b'.', b't', b'x', b't', b'd', b'a', b't', b'a', 0x50, 0x4B, 0x03, 0x04,
		0x14, 0x00, 0b00000000, 0b00000000, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x63, 0xF3, 0xF3,
		0xAD, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, b'1', b'.',
		b't', b'x', b't', b'd', b'a', b't', b'a', 0x50, 0x4B, 0x01, 0x02, 0x14, 0x00, 0x14, 0x00,
		0b00000000, 0b00000000, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x63, 0xF3, 0xF3, 0xAD, 0x04,
		0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xA4, 0x81, 0x27, 0x00, 0x00, 0x00, b'1', b'.', b't', b'x', b't',
		0x50, 0x4B, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x33, 0x00, 0x00,
		0x00, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00,
	]);
	let mut destination = Vec::new();
	let mut writer = Cursor::new(&mut destination);
	assert!(delete_metadata(&mut reader, &mut writer).is_ok());
	assert_eq!(destination, BASIC);
}
