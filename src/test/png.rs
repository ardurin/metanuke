use super::super::{error::Error, metadata::png::delete_metadata};
use std::io::Cursor;

const MINIMAL: [u8; 67] = [
	0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0x15, 0xc4,
	0x89, 0x00, 0x00, 0x00, 0x0a, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0x63, 0x00, 0x01, 0x00, 0x00,
	0x05, 0x00, 0x01, 0x0d, 0x0a, 0x2d, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae,
	0x42, 0x60, 0x82,
];

#[test]
fn minimal() {
	let mut reader = Cursor::new(MINIMAL);
	let mut destination = Vec::new();
	let mut writer = Cursor::new(&mut destination);
	assert!(matches!(delete_metadata(&mut reader, &mut writer), Ok(())));
	assert_eq!(destination.as_slice(), MINIMAL);
}

#[test]
fn one_text_chunk() {
	let mut reader = Cursor::new(&[
		0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44,
		0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x08, 0x06, 0x00, 0x00, 0x00, 0x1f,
		0x15, 0xc4, 0x89, 0x00, 0x00, 0x00, 0x22, 0x74, 0x45, 0x58, 0x74, 0x44, 0x65, 0x73, 0x63,
		0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x50, 0x4e, 0x47, 0x20, 0x66, 0x69, 0x6c,
		0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
		0x60, 0xf1, 0x7a, 0xb3, 0x00, 0x00, 0x00, 0x0a, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0x63,
		0x00, 0x01, 0x00, 0x00, 0x05, 0x00, 0x01, 0x0d, 0x0a, 0x2d, 0xb4, 0x00, 0x00, 0x00, 0x00,
		0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82,
	]);
	let mut destination = Vec::new();
	let mut writer = Cursor::new(&mut destination);
	assert!(matches!(delete_metadata(&mut reader, &mut writer), Ok(())));
	assert_eq!(destination.as_slice(), MINIMAL);
}

#[test]
fn two_consecutive_text_chunks() {
	let mut reader = Cursor::new(&[
		0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44,
		0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x08, 0x06, 0x00, 0x00, 0x00, 0x1f,
		0x15, 0xc4, 0x89, 0x00, 0x00, 0x00, 0x21, 0x74, 0x45, 0x58, 0x74, 0x43, 0x72, 0x65, 0x61,
		0x74, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x00, 0x32, 0x30, 0x31, 0x30, 0x2d,
		0x30, 0x31, 0x2d, 0x32, 0x30, 0x20, 0x31, 0x30, 0x3a, 0x33, 0x30, 0x3a, 0x30, 0x30, 0x9f,
		0x96, 0xff, 0x2d, 0x00, 0x00, 0x00, 0x22, 0x74, 0x45, 0x58, 0x74, 0x44, 0x65, 0x73, 0x63,
		0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x50, 0x4e, 0x47, 0x20, 0x66, 0x69, 0x6c,
		0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
		0x60, 0xf1, 0x7a, 0xb3, 0x00, 0x00, 0x00, 0x0a, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0x63,
		0x00, 0x01, 0x00, 0x00, 0x05, 0x00, 0x01, 0x0d, 0x0a, 0x2d, 0xb4, 0x00, 0x00, 0x00, 0x00,
		0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82,
	]);
	let mut destination = Vec::new();
	let mut writer = Cursor::new(&mut destination);
	assert!(matches!(delete_metadata(&mut reader, &mut writer), Ok(())));
	assert_eq!(destination.as_slice(), MINIMAL);
}

#[test]
fn two_non_consecutive_text_chunks() {
	let mut reader = Cursor::new(&[
		0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44,
		0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x08, 0x06, 0x00, 0x00, 0x00, 0x1f,
		0x15, 0xc4, 0x89, 0x00, 0x00, 0x00, 0x21, 0x74, 0x45, 0x58, 0x74, 0x43, 0x72, 0x65, 0x61,
		0x74, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x00, 0x32, 0x30, 0x31, 0x30, 0x2d,
		0x30, 0x31, 0x2d, 0x32, 0x30, 0x20, 0x31, 0x30, 0x3a, 0x33, 0x30, 0x3a, 0x30, 0x30, 0x9f,
		0x96, 0xff, 0x2d, 0x00, 0x00, 0x00, 0x0a, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0x63, 0x00,
		0x01, 0x00, 0x00, 0x05, 0x00, 0x01, 0x0d, 0x0a, 0x2d, 0xb4, 0x00, 0x00, 0x00, 0x22, 0x74,
		0x45, 0x58, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x00,
		0x50, 0x4e, 0x47, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6d,
		0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x60, 0xf1, 0x7a, 0xb3, 0x00, 0x00, 0x00, 0x00,
		0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82,
	]);
	let mut destination = Vec::new();
	let mut writer = Cursor::new(&mut destination);
	assert!(matches!(delete_metadata(&mut reader, &mut writer), Ok(())));
	assert_eq!(destination.as_slice(), MINIMAL);
}

#[test]
fn one_unknown_chunk() {
	let mut reader = Cursor::new(&[
		0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44,
		0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x08, 0x06, 0x00, 0x00, 0x00, 0x1f,
		0x15, 0xc4, 0x89, 0x00, 0x00, 0x00, 0x06, 0x3f, 0x3f, 0x3f, 0x3f, 0x0a, 0x00, 0x50, 0x34,
		0x01, 0x20, 0xe2, 0xbd, 0x5a, 0xab, 0x00, 0x00, 0x00, 0x0a, 0x49, 0x44, 0x41, 0x54, 0x78,
		0x9c, 0x63, 0x00, 0x01, 0x00, 0x00, 0x05, 0x00, 0x01, 0x0d, 0x0a, 0x2d, 0xb4, 0x00, 0x00,
		0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82,
	]);
	let mut destination = Vec::new();
	let mut writer = Cursor::new(&mut destination);
	assert!(matches!(delete_metadata(&mut reader, &mut writer), Ok(())));
	assert_eq!(destination.as_slice(), MINIMAL);
}

#[test]
fn chunk_missing_all_data() {
	let mut reader = Cursor::new([
		0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44,
		0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x08, 0x06, 0x00, 0x00, 0x00, 0x1f,
		0x15, 0xc4, 0x89, 0x00, 0x00, 0x00, 0x0a, 0x49, 0x44, 0x41, 0x54,
	]);
	let mut writer = Cursor::new(Vec::new());
	assert!(matches!(
		delete_metadata(&mut reader, &mut writer),
		Err(Error::Malformed)
	));
}

#[test]
fn chunk_missing_some_data() {
	let mut reader = Cursor::new([
		0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44,
		0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x08, 0x06, 0x00, 0x00, 0x00, 0x1f,
		0x15, 0xc4, 0x89, 0x00, 0x00, 0x00, 0x0a, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c,
	]);
	let mut writer = Cursor::new(Vec::new());
	assert!(matches!(
		delete_metadata(&mut reader, &mut writer),
		Err(Error::Malformed)
	));
}

#[test]
fn chunk_missing_type() {
	let mut reader = Cursor::new([
		0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44,
		0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x08, 0x06, 0x00, 0x00, 0x00, 0x1f,
		0x15, 0xc4, 0x89, 0x00, 0x00, 0x00, 0x0a,
	]);
	let mut writer = Cursor::new(Vec::new());
	assert!(matches!(
		delete_metadata(&mut reader, &mut writer),
		Err(Error::Malformed)
	));
}
