use crate::metadata::flac::delete_metadata;
use std::io::Cursor;

const BASIC: &[u8] = &[
	b'f', b'L', b'a', b'C', 0b10000000, 0x00, 0x00, 0x22, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0C,
	0x00, 0x00, 0x0C, 0x0A, 0xC4, 0x40, 0xF0, 0x00, 0x00, 0x00, 0x01, 0xC4, 0x10, 0x3F, 0x12, 0x2D,
	0x27, 0x67, 0x7C, 0x9D, 0xB1, 0x44, 0xCA, 0xE1, 0x39, 0x4A, 0x66, 0xFF, 0xF8, 0x69, 0x08, 0x00,
	0x00, 0x1D, 0x02, 0x00, 0x00, 0x20, 0x0C,
];

const VORBIS_COMMENT: &[u8] = &[
	b'f', b'L', b'a', b'C', 0b00000000, 0x00, 0x00, 0x22, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0C,
	0x00, 0x00, 0x0C, 0x0A, 0xC4, 0x40, 0xF0, 0x00, 0x00, 0x00, 0x01, 0xC4, 0x10, 0x3F, 0x12, 0x2D,
	0x27, 0x67, 0x7C, 0x9D, 0xB1, 0x44, 0xCA, 0xE1, 0x39, 0x4A, 0x66, 0b10000100, 0x00, 0x00, 0x1C,
	0x07, 0x00, 0x00, 0x00, b'l', b'i', b'b', b'F', b'L', b'A', b'C', 0x01, 0x00, 0x00, 0x00, 0x09,
	0x00, 0x00, 0x00, b'D', b'A', b'T', b'E', b'=', b'2', b'0', b'2', b'5', 0xFF, 0xF8, 0x69, 0x08,
	0x00, 0x00, 0x1D, 0x02, 0x00, 0x00, 0x20, 0x0C,
];

const UNKNOWN_METADATA: &[u8] = &[
	b'f', b'L', b'a', b'C', 0b00000000, 0x00, 0x00, 0x22, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0C,
	0x00, 0x00, 0x0C, 0x0A, 0xC4, 0x40, 0xF0, 0x00, 0x00, 0x00, 0x01, 0xC4, 0x10, 0x3F, 0x12, 0x2D,
	0x27, 0x67, 0x7C, 0x9D, 0xB1, 0x44, 0xCA, 0xE1, 0x39, 0x4A, 0x66, 0b11000000, 0x00, 0x00, 0x04,
	b'?', b'?', b'?', b'?', 0xFF, 0xF8, 0x69, 0x08, 0x00, 0x00, 0x1D, 0x02, 0x00, 0x00, 0x20, 0x0C,
];

const NO_STREAM_INFO: &[u8] = &[
	b'f', b'L', b'a', b'C', 0b10000100, 0x00, 0x00, 0x1C, 0x07, 0x00, 0x00, 0x00, b'l', b'i', b'b',
	b'F', b'L', b'A', b'C', 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, b'D', b'A', b'T', b'E',
	b'=', b'2', b'0', b'2', b'5', 0xFF, 0xF8, 0x69, 0x08, 0x00, 0x00, 0x1D, 0x02, 0x00, 0x00, 0x20,
	0x0C,
];

#[test]
fn basic() {
	let mut source = Cursor::new(BASIC);
	let mut destination = Vec::new();
	assert!(delete_metadata(&mut source, &mut destination).is_ok());
	assert_eq!(destination, BASIC);
}

#[test]
fn vorbis_comment() {
	let mut source = Cursor::new(VORBIS_COMMENT);
	let mut destination = Vec::new();
	assert!(delete_metadata(&mut source, &mut destination).is_ok());
	assert_eq!(destination, BASIC);
}

#[test]
fn unknown_metadata() {
	let mut source = Cursor::new(UNKNOWN_METADATA);
	let mut destination = Vec::new();
	assert!(delete_metadata(&mut source, &mut destination).is_ok());
	assert_eq!(destination, BASIC);
}

#[test]
fn no_stream_info() {
	let mut source = Cursor::new(NO_STREAM_INFO);
	let mut destination = Vec::new();
	assert!(delete_metadata(&mut source, &mut destination).is_err());
}
