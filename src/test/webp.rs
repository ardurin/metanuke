use crate::{error::Error, metadata::webp::delete_metadata};
use std::io::Cursor;

const BASIC: &[u8] = &[
	b'R', b'I', b'F', b'F', 0x1E, 0x00, 0x00, 0x00, b'W', b'E', b'B', b'P', b'V', b'P', b'8', b'L',
	0x11, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x07, 0xD0, 0xFF, 0xFE, 0xF7, 0xBF, 0xFF,
	0x81, 0x88, 0xE8, 0x7F, 0x00, 0x00,
];

const EXIF: &[u8] = &[
	b'R', b'I', b'F', b'F', 0x1E, 0x00, 0x00, 0x00, b'W', b'E', b'B', b'P', b'V', b'P', b'8', b'L',
	0x11, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x07, 0xD0, 0xFF, 0xFE, 0xF7, 0xBF, 0xFF,
	0x81, 0x88, 0xE8, 0x7F, 0x00, 0x00, b'E', b'X', b'I', b'F', 0x24, 0x00, 0x00, 0x00, b'M', b'M',
	0x00, 0x2A, 0x00, 0x00, 0x00, 0x08, 0x00, 0x01, 0x90, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0A,
	0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, b'2', b'0', b'2', b'5', b'-', b'0', b'1', b'-',
	b'2', b'0',
];

const WAV: &[u8] = &[
	b'R', b'I', b'F', b'F', 0x24, 0x00, 0x00, 0x00, b'W', b'A', b'V', b'E', 0x66, 0x6D, 0x74, 0x20,
	0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x44, 0xAC, 0x00, 0x00, 0x88, 0x58, 0x01, 0x00,
	0x02, 0x00, 0x10, 0x00, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00,
];

#[test]
fn basic() {
	let mut source = Cursor::new(BASIC);
	let mut destination = Vec::new();
	assert!(delete_metadata(&mut source, &mut destination).is_ok());
	assert_eq!(&destination, BASIC);
}

#[test]
fn exif() {
	let mut source = Cursor::new(EXIF);
	let mut destination = Vec::new();
	assert!(delete_metadata(&mut source, &mut destination).is_ok());
	assert_eq!(&destination, BASIC);
}

#[test]
fn wav() {
	let mut source = Cursor::new(WAV);
	let mut destination = Vec::new();
	assert!(matches!(
		delete_metadata(&mut source, &mut destination),
		Err(Error::Unsupported)
	));
}
